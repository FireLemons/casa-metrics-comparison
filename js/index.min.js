function downloadToTextFile(t,e){const a=document.createElement("a"),s=new Blob([t],{type:"text/plain"});a.href=URL.createObjectURL(s),a.download=e,a.click(),URL.revokeObjectURL(a.href)}function getJSON(t){return new Promise(((e,a)=>{const s=new XMLHttpRequest;s.onreadystatechange=function(){4===this.readyState&&(200===this.status?e(JSON.parse(this.responseText)):(a(`Request to ${t} Failed`),console.error(`Status code: ${this.status}`)))},s.onerror=function(){a(`Request to ${t} Failed`),console.error("Request Response:"),console.error(s.responseText)},s.open("get",t,!0),s.send()}))}const app=new Vue({el:"#app",data:{clearLocalStorageCounter:4,global:{"Average Note Length(characters)":{savedValue:0,newValue:0},"Number of Case Contacts With Notes":{savedValue:0,newValue:0},"Number of Case Contacts Without Notes":{savedValue:0,newValue:0},"Total Hours in Case Contacts":{savedValue:0,newValue:0}},meta:{"last updated":new Date},notifications:[],orgs:[{name:"Prince George"},{name:"Montgomery"}],requests:{}},computed:{backup:function(){const t=document.querySelector("textarea");return t.style.height=`${t.scrollHeight}px`,`localStorage.setItem('metrics', JSON.stringify(${JSON.stringify(this.saveData,null,2)}))`},clearLocalStorageText:function(){return 4===this.clearLocalStorageCounter?"Clear Local Storage":0===this.clearLocalStorageCounter?"Click 1 more time to clear local storage":`Click ${this.clearLocalStorageCounter+1} more times to clear local storage`},diffs:function(){const t={};this.orgs.forEach((e=>{e&&(t[e.name]=this.diffMetrics(e.metrics))}));const e=this.diffMetrics(this.global);return{orgs:t,global:e}},hoursSinceLastUpdated:function(){return Math.round((new Date-this.meta["last updated"])/36e5)},saveData:function(){return{global:this.global,meta:{"last updated":this.meta["last updated"].toJSON()},orgs:this.orgs}}},methods:{diffMetrics:function(t){const e={};for(label in t)e[label]=t[label].newValue-t[label].savedValue;return e},download:function(){downloadToTextFile(this.backup,"backup.js")},handleGlobalMetric:function(t,e){getJSON(t).then((t=>{t.values.forEach((t=>{this.updateMetric(e,"global",t[0])})),this.requests[e]="loaded"})).catch((t=>{this.notify("error",t)}))},handleSimpleOrgMetric:function(t){let e=Array.prototype.slice.call(arguments,1);getJSON(t).then((t=>{t.values.forEach((t=>{this.orgs[t[0]-1]&&e.forEach(((e,a)=>{this.updateMetric(e,t[0]-1,t[a+1])}))})),e.forEach(((t,e)=>{this.requests[t]="loaded"}))})).catch((t=>{this.notify("error",t)}))},notify:function(t,e){let a,s;switch(t){case"error":a="red-text",s="ERROR:";break;case"info":s="INFO:";break;default:console.log(new RangeError(`Undefined notification level: ${t}`))}this.notifications.push({color:a,text:`${s} ${e}`})},onClickClearStorage:function(){this.clearLocalStorageCounter>0?this.clearLocalStorageCounter--:(localStorage.removeItem("metrics"),this.notify("info","Local Storage Cleared"),this.clearLocalStorageCounter=4)},save:function(){this.meta["last updated"]=new Date,this.orgs.map((t=>t.metrics)).concat(this.global).forEach((t=>{for(metric in t)t[metric].savedValue=t[metric].newValue})),localStorage.setItem("metrics",JSON.stringify(this.saveData))},updateMetric:function(t,e,a){"global"===e?this.global[t].newValue=Number.isInteger(a)?a:Math.round(a):this.orgs[e].metrics[t].newValue=Number.isInteger(a)?a:Math.round(a)}},created:function(){const t={},e=JSON.parse(localStorage.getItem("metrics"));for(metric in["Accepted Invitations","Unaccepted Invitations","Cases With Mandates","Case Contact Count","Case Contact Count in Last 2 Weeks","Users Who Have Added Case Contacts in Last 2 Weeks","Notification Count","Percent of Notifications Read","Volunteers Assigned to Supervisors"].forEach((e=>{t[e]={savedValue:0,newValue:0}})),this.orgs.forEach((e=>{this.$set(e,"metrics",JSON.parse(JSON.stringify(t)))})),e&&(this.global=Object.assign(this.global,e.global),this.meta={"last updated":new Date(e.meta["last updated"])},this.orgs.forEach(((t,a)=>{this.orgs[a]={name:t.name,metrics:Object.assign(this.orgs[a].metrics,e.orgs[a].metrics)}}))),this.global)this.$set(this.requests,metric,"unloaded");for(metric in this.orgs[0].metrics)this.$set(this.requests,metric,"unloaded")},mounted:function(){this.handleSimpleOrgMetric("https://data.heroku.com/dataclips/idfolumrbaubogbmewdoeyahhdtj.json","Case Contact Count"),this.handleSimpleOrgMetric("https://data.heroku.com/dataclips/fairemyutljnkjgwldlaqtpecvvt.json","Cases With Mandates"),this.handleSimpleOrgMetric("https://data.heroku.com/dataclips/ahvopfhogmvuccdzdnncmwlioidd.json","Users Who Have Added Case Contacts in Last 2 Weeks","Case Contact Count in Last 2 Weeks"),this.handleSimpleOrgMetric("https://data.heroku.com/dataclips/ymbdlyldhiiqcmsslbjfjdjmzwco.json","Volunteers Assigned to Supervisors"),this.handleSimpleOrgMetric("https://data.heroku.com/dataclips/xsikhducnqfdrmfcntvdhtehuuwp.json","Notification Count","Percent of Notifications Read"),this.handleGlobalMetric("https://data.heroku.com/dataclips/vgblwvzhclatsdxzdbihypqulckq.json","Total Hours in Case Contacts"),getJSON("https://data.heroku.com/dataclips/ibzctyhepsfsgpiobxrltuhejxds.json").then((t=>{t.values.forEach((t=>{let e=t[1]?"Accepted Invitations":"Unaccepted Invitations";this.orgs[t[0]-1]&&this.updateMetric(e,t[0]-1,t[2])})),this.requests["Accepted Invitations"]="loaded",this.requests["Unaccepted Invitations"]="loaded"})).catch((t=>{this.notify("error",t)})),getJSON("https://data.heroku.com/dataclips/offxulwauuaqdjxviyugdqaygexw.json").then((t=>{t.values.forEach((t=>{t[0]?(this.updateMetric("Number of Case Contacts With Notes","global",t[3]),this.updateMetric("Average Note Length(characters)","global",t[2])):this.updateMetric("Number of Case Contacts Without Notes","global",t[3]),this.requests["Average Note Length(characters)"]="loaded",this.requests["Number of Case Contacts With Notes"]="loaded",this.requests["Number of Case Contacts Without Notes"]="loaded"}))})).catch((t=>{this.notify("error",t)}))}});
