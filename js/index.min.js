function downloadToTextFile(e,t){const s=document.createElement("a"),a=new Blob([e],{type:"text/plain"});s.href=URL.createObjectURL(a),s.download=t,s.click(),URL.revokeObjectURL(s.href)}function getJSON(e){return new Promise(((t,s)=>{const a=new XMLHttpRequest;a.onreadystatechange=function(){4===this.readyState&&(200===this.status?t(JSON.parse(this.responseText)):console.error(`Request to ${e} Failed`))},a.open("get",e,!0),a.send()}))}const app=new Vue({el:"#app",data:{global:{"Total Hours in Case Contacts":{savedValue:0,newValue:0}},meta:{"last updated":new Date},orgs:[{name:"Prince George",metrics:{"Accepted Invitations":{savedValue:0,newValue:0},"Unaccepted Invitations":{savedValue:0,newValue:0},"Cases With Mandates":{savedValue:0,newValue:0},"Case Contact Count":{savedValue:0,newValue:0},"Case Contact Count in Last 2 Weeks":{savedValue:0,newValue:0},"Users Who Have Added Case Contacts in Last 2 Weeks":{savedValue:0,newValue:0},"Notification Count":{savedValue:0,newValue:0},"Volunteers Assigned to Supervisors":{savedValue:0,newValue:0}}},{name:"Montgomery",metrics:{"Accepted Invitations":{savedValue:0,newValue:0},"Unaccepted Invitations":{savedValue:0,newValue:0},"Cases With Mandates":{savedValue:0,newValue:0},"Case Contact Count":{savedValue:0,newValue:0},"Case Contact Count in Last 2 Weeks":{savedValue:0,newValue:0},"Users Who Have Added Case Contacts in Last 2 Weeks":{savedValue:0,newValue:0},"Notification Count":{savedValue:0,newValue:0},"Volunteers Assigned to Supervisors":{savedValue:0,newValue:0}}}],requests:{}},computed:{backup:function(){const e=document.querySelector("textarea");return e.style.height=e.scrollHeight+"px",`localStorage.setItem('metrics', JSON.stringify(${JSON.stringify({orgs:this.orgs,global:this.global},null,2)}))`},diffs:function(){const e={};this.orgs.forEach((t=>{t&&(e[t.name]=this.diffMetrics(t.metrics))}));const t=this.diffMetrics(this.global);return{orgs:e,global:t}},hoursSinceLastUpdated:function(){return Math.round((new Date-this.meta["last updated"])/36e5)}},methods:{diffMetrics:function(e){const t={};for(label in e)t[label]=e[label].newValue-e[label].savedValue;return t},download:function(){downloadToTextFile(this.backup,"backup.js")},handleGlobalMetric:function(e,t){getJSON(e).then((e=>{e.values.forEach((e=>{this.updateMetric(t,"global",e[0])})),this.requests[t]="loaded"}))},handleSimpleOrgMetric:function(e,t){getJSON(e).then((e=>{e.values.forEach((e=>{this.orgs[e[0]-1]&&this.updateMetric(t,e[0]-1,e[1])})),this.requests[t]="loaded"}))},save:function(){this.orgs.map((e=>e.metrics)).concat(this.global).forEach((e=>{for(metric in e)e[metric].savedValue=e[metric].newValue})),localStorage.setItem("metrics",JSON.stringify({orgs:this.orgs,global:this.global}))},updateMetric:function(e,t,s){"global"===t?this.global[e].newValue=Number.isInteger(s)?s:Math.round(s):this.orgs[t].metrics[e].newValue=Number.isInteger(s)?s:Math.round(s)}},mounted:function(){const e=JSON.parse(localStorage.getItem("metrics"));for(metric in e&&(this.orgs.forEach(((t,s)=>{this.orgs[s]={name:t.name,metrics:Object.assign(this.orgs[s].metrics,e.orgs[s].metrics)}})),this.global=Object.assign(this.global,e.global)),this.global)this.requests[metric]="unloaded";for(metric in this.orgs[0].metrics)this.requests[metric]="unloaded";this.handleSimpleOrgMetric("https://data.heroku.com/dataclips/idfolumrbaubogbmewdoeyahhdtj.json","Case Contact Count"),this.handleSimpleOrgMetric("https://data.heroku.com/dataclips/ymbdlyldhiiqcmsslbjfjdjmzwco.json","Volunteers Assigned to Supervisors"),this.handleSimpleOrgMetric("https://data.heroku.com/dataclips/xsikhducnqfdrmfcntvdhtehuuwp.json","Notification Count"),this.handleSimpleOrgMetric("https://data.heroku.com/dataclips/fairemyutljnkjgwldlaqtpecvvt.json","Cases With Mandates"),this.handleGlobalMetric("https://data.heroku.com/dataclips/vgblwvzhclatsdxzdbihypqulckq.json","Total Hours in Case Contacts"),getJSON("https://data.heroku.com/dataclips/ibzctyhepsfsgpiobxrltuhejxds.json").then((e=>{e.values.forEach((e=>{let t=e[1]?"Accepted Invitations":"Unaccepted Invitations";this.orgs[e[0]-1]&&(this.orgs[e[0]-1].metrics[t].newValue=e[2])})),this.requests["Accepted Invitations"]="loaded",this.requests["Unaccepted Invitations"]="loaded"})),getJSON("https://data.heroku.com/dataclips/ahvopfhogmvuccdzdnncmwlioidd.json").then((e=>{e.values.forEach((e=>{this.orgs[e[0]-1]&&(this.orgs[e[0]-1].metrics["Users Who Have Added Case Contacts in Last 2 Weeks"].newValue=e[1],this.orgs[e[0]-1].metrics["Case Contact Count in Last 2 Weeks"].newValue=e[2])})),this.requests["Users Who Have Added Case Contacts in Last 2 Weeks"]="loaded",this.requests["Case Contact Count in Last 2 Weeks"]="loaded"}))}});
